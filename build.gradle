group 'org.anagy.bugreport-wiremock-webflux-hanging'
version '0.0.1-SNAPSHOT'

apply plugin: 'org.springframework.boot'

buildscript {
    ext {
        projectConfigDir = "${rootProject.projectDir}/data/config"
    }
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint" << "-Xlint:-processing"
        options.compilerArgs << "-Werror"
    }
}

configurations {
    compile.exclude group: "junit", module: "junit"
}

test {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-webflux')
    compile("org.springframework.cloud:spring-cloud-starter-sleuth")

    compileOnly("org.springframework.boot:spring-boot-configuration-processor")

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.junit.jupiter:junit-jupiter-api")
    testCompile("org.junit.jupiter:junit-jupiter-params")
    testRuntime("org.junit.jupiter:junit-jupiter-engine")
    testCompile('io.projectreactor:reactor-test')

    testCompile("com.github.tomakehurst:wiremock-jre8:${tomakehurstWiremockVersion}")
    testCompile("org.springframework.cloud:spring-cloud-contract-wiremock") {
        exclude group: 'com.github.tomakehurst', module: 'wiremock-standalone'
        exclude group: 'com.github.tomakehurst', module: 'wiremock-jre8-standalone'
    }
}

bootRun {
    args = ["--spring.output.ansi.enabled=always",
            "--spring.profiles.active=local"]
}

configurations {
    itestCompile.extendsFrom testCompile
    itestCompileOnly.extendsFrom testCompileOnly
    itestRuntime.extendsFrom testRuntime
    itestAnnotationProcessor.extendsFrom testAnnotationProcessor
}

sourceSets {
    itest {
        compileClasspath += main.output
        runtimeClasspath += main.output
        compileClasspath += test.output
        runtimeClasspath += test.output

        java.srcDir file('src/itest/java')
        resources.srcDir file('src/itest/resources')
    }
}

task itest(type: Test) {
    testClassesDirs = sourceSets.itest.output.getClassesDirs()
    classpath = sourceSets.itest.runtimeClasspath
}

itest {
    useJUnitPlatform()
}
